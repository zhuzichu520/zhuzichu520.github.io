{"pageProps":{"title":"TypeScript-变量声明","description":"let和const是JavaScript里相对较新的变量声明方式。 像我们之前提到过的，let在很多方面与var是相似的，但是可以帮助大家避免在JavaScript里常见一些问题","date":"2021-12-26","modified_date":"2021-12-26","image":"/assets/images/posts/random-img.jpg","content":"<h1>变量声明</h1>\n<p><code>let</code>和<code>const</code>是JavaScript里相对较新的变量声明方式。 像我们之前提到过的，<code>let</code>在很多方面与<code>var</code>是相似的，但是可以帮助大家避免在JavaScript里常见一些问题。 <code>const</code>是对<code>let</code>的一个增强，它能阻止对一个变量再次赋值。</p>\n<p>因为TypeScript是JavaScript的超集，所以它本身就支持<code>let</code>和<code>const</code>。 下面我们会详细说明这些新的声明方式以及为什么推荐使用它们来代替<code>var</code>。</p>\n<p>如果你之前使用JavaScript时没有特别在意，那么这节内容会唤起你的回忆。 如果你已经对<code>var</code>声明的怪异之处了如指掌，那么你可以轻松地略过这节。</p>\n<h1><code>var</code> 声明</h1>\n<p>一直以来我们都是通过<code>var</code>关键字定义JavaScript变量。</p>\n<pre><code>var a = 10;\n</code></pre>\n<p>大家都能理解，这里定义了一个名为<code>a</code>值为<code>10</code>的变量。</p>\n<p>我们也可以在函数内部定义变量：</p>\n<pre><code>function f() {\r\n    var message = \"Hello, world!\";\r\n\r\n    return message;\r\n}\n</code></pre>\n<p>并且我们也可以在其它函数内部访问相同的变量。</p>\n<pre><code>function f() {\r\n    var a = 10;\r\n    return function g() {\r\n        var b = a + 1;\r\n        return b;\r\n    }\r\n}\r\n\r\nvar g = f();\r\ng(); // returns 11;\n</code></pre>\n<p>上面的例子里，<code>g</code>可以获取到<code>f</code>函数里定义的<code>a</code>变量。 每当<code>g</code>被调用时，它都可以访问到<code>f</code>里的<code>a</code>变量。 即使当<code>g</code>在<code>f</code>已经执行完后才被调用，它仍然可以访问及修改<code>a</code>。</p>\n<pre><code>function f() {\r\n    var a = 1;\r\n\r\n    a = 2;\r\n    var b = g();\r\n    a = 3;\r\n\r\n    return b;\r\n\r\n    function g() {\r\n        return a;\r\n    }\r\n}\r\n\r\nf(); // returns 2\n</code></pre>\n<h2>作用域规则</h2>\n<p>对于熟悉其它语言的人来说，<code>var</code>声明有些奇怪的作用域规则。 看下面的例子：</p>\n<pre><code>function f(shouldInitialize: boolean) {\r\n    if (shouldInitialize) {\r\n        var x = 10;\r\n    }\r\n\r\n    return x;\r\n}\r\n\r\nf(true);  // returns '10'\r\nf(false); // returns 'undefined'\n</code></pre>\n<p>有些读者可能要多看几遍这个例子。 变量<code>x</code>是定义在*<code>if</code>语句里面*，但是我们却可以在语句的外面访问它。 这是因为<code>var</code>声明可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问（我们后面会详细介绍），包含它的代码块对此没有什么影响。 有些人称此为*<code>var</code>作用域<em>或</em>函数作用域*。 函数参数也使用函数作用域。</p>\n<p>这些作用域规则可能会引发一些错误。 其中之一就是，多次声明同一个变量并不会报错：</p>\n<pre><code>function sumMatrix(matrix: number[][]) {\r\n    var sum = 0;\r\n    for (var i = 0; i &#x3C; matrix.length; i++) {\r\n        var currentRow = matrix[i];\r\n        for (var i = 0; i &#x3C; currentRow.length; i++) {\r\n            sum += currentRow[i];\r\n        }\r\n    }\r\n\r\n    return sum;\r\n}\n</code></pre>\n<p>这里很容易看出一些问题，里层的<code>for</code>循环会覆盖变量<code>i</code>，因为所有<code>i</code>都引用相同的函数作用域内的变量。 有经验的开发者们很清楚，这些问题可能在代码审查时漏掉，引发无穷的麻烦。</p>\n<h2>变量获取怪异之处</h2>\n<p>快速的猜一下下面的代码会返回什么：</p>\n<pre><code>for (var i = 0; i &#x3C; 10; i++) {\r\n    setTimeout(function() { console.log(i); }, 100 * i);\r\n}\n</code></pre>\n<p>介绍一下，<code>setTimeout</code>会在若干毫秒的延时后执行一个函数（等待其它代码执行完毕）。</p>\n<p>好吧，看一下结果：</p>\n<pre><code>10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\n</code></pre>\n<p>很多JavaScript程序员对这种行为已经很熟悉了，但如果你很不解，你并不是一个人。 大多数人期望输出结果是这样：</p>\n<pre><code>0\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\n</code></pre>\n<p>还记得我们上面讲的变量获取吗？</p>\n<blockquote>\n<p>每当<code>g</code>被调用时，它都可以访问到<code>f</code>里的<code>a</code>变量。</p>\n</blockquote>\n<p>让我们花点时间考虑在这个上下文里的情况。 <code>setTimeout</code>在若干毫秒后执行一个函数，并且是在<code>for</code>循环结束后。 <code>for</code>循环结束后，<code>i</code>的值为<code>10</code>。 所以当函数被调用的时候，它会打印出<code>10</code>！</p>\n<p>一个通常的解决方法是使用立即执行的函数表达式（IIFE）来捕获每次迭代时<code>i</code>的值：</p>\n<pre><code>for (var i = 0; i &#x3C; 10; i++) {\r\n    // capture the current state of 'i'\r\n    // by invoking a function with its current value\r\n    (function(i) {\r\n        setTimeout(function() { console.log(i); }, 100 * i);\r\n    })(i);\r\n}\n</code></pre>\n<p>这种奇怪的形式我们已经司空见惯了。 参数<code>i</code>会覆盖<code>for</code>循环里的<code>i</code>，但是因为我们起了同样的名字，所以我们不用怎么改<code>for</code>循环体里的代码。</p>\n<h1><code>let</code> 声明</h1>\n<p>现在你已经知道了<code>var</code>存在一些问题，这恰好说明了为什么用<code>let</code>语句来声明变量。 除了名字不同外，<code>let</code>与<code>var</code>的写法一致。</p>\n<pre><code>let hello = \"Hello!\";\n</code></pre>\n<p>主要的区别不在语法上，而是语义，我们接下来会深入研究。</p>\n<h2>块作用域</h2>\n<p>当用<code>let</code>声明一个变量，它使用的是<em>词法作用域</em>或<em>块作用域</em>。 不同于使用<code>var</code>声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或<code>for</code>循环之外是不能访问的。</p>\n<pre><code>function f(input: boolean) {\r\n    let a = 100;\r\n\r\n    if (input) {\r\n        // Still okay to reference 'a'\r\n        let b = a + 1;\r\n        return b;\r\n    }\r\n\r\n    // Error: 'b' doesn't exist here\r\n    return b;\r\n}\n</code></pre>\n<p>这里我们定义了2个变量<code>a</code>和<code>b</code>。 <code>a</code>的作用域是<code>f</code>函数体内，而<code>b</code>的作用域是<code>if</code>语句块里。</p>\n<p>在<code>catch</code>语句里声明的变量也具有同样的作用域规则。</p>\n<pre><code>try {\r\n    throw \"oh no!\";\r\n}\r\ncatch (e) {\r\n    console.log(\"Oh well.\");\r\n}\r\n\r\n// Error: 'e' doesn't exist here\r\nconsole.log(e);\n</code></pre>\n<p>拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。 虽然这些变量始终“存在”于它们的作用域里，但在直到声明它的代码之前的区域都属于<em>暂时性死区</em>。 它只是用来说明我们不能在<code>let</code>语句之前访问它们，幸运的是TypeScript可以告诉我们这些信息。</p>\n<pre><code>a++; // illegal to use 'a' before it's declared;\r\nlet a;\n</code></pre>\n<p>注意一点，我们仍然可以在一个拥有块作用域变量被声明前<em>获取</em>它。 只是我们不能在变量声明前去调用那个函数。 如果生成代码目标为ES2015，现代的运行时会抛出一个错误；然而，现今TypeScript是不会报错的。</p>\n<pre><code>function foo() {\r\n    // okay to capture 'a'\r\n    return a;\r\n}\r\n\r\n// 不能在'a'被声明前调用'foo'\r\n// 运行时应该抛出错误\r\nfoo();\r\n\r\nlet a;\n</code></pre>\n<p>关于<em>暂时性死区</em>的更多信息，查看这里<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let\">Mozilla Developer Network</a>.</p>\n<h2>重定义及屏蔽</h2>\n<p>我们提过使用<code>var</code>声明时，它不在乎你声明多少次；你只会得到1个。</p>\n<pre><code>function f(x) {\r\n    var x;\r\n    var x;\r\n\r\n    if (true) {\r\n        var x;\r\n    }\r\n}\n</code></pre>\n<p>在上面的例子里，所有<code>x</code>的声明实际上都引用一个<em>相同</em>的<code>x</code>，并且这是完全有效的代码。 这经常会成为bug的来源。 好的是，<code>let</code>声明就不会这么宽松了。</p>\n<pre><code>let x = 10;\r\nlet x = 20; // 错误，不能在1个作用域里多次声明`x`\n</code></pre>\n<p>并不是要求两个均是块级作用域的声明TypeScript才会给出一个错误的警告。</p>\n<pre><code>function f(x) {\r\n    let x = 100; // error: interferes with parameter declaration\r\n}\r\n\r\nfunction g() {\r\n    let x = 100;\r\n    var x = 100; // error: can't have both declarations of 'x'\r\n}\n</code></pre>\n<p>并不是说块级作用域变量不能用函数作用域变量来声明。 而是块级作用域变量需要在明显不同的块里声明。</p>\n<pre><code>function f(condition, x) {\r\n    if (condition) {\r\n        let x = 100;\r\n        return x;\r\n    }\r\n\r\n    return x;\r\n}\r\n\r\nf(false, 0); // returns 0\r\nf(true, 0);  // returns 100\n</code></pre>\n<p>在一个嵌套作用域里引入一个新名字的行为称做<em>屏蔽</em>。 它是一把双刃剑，它可能会不小心地引入新问题，同时也可能会解决一些错误。 例如，假设我们现在用<code>let</code>重写之前的<code>sumMatrix</code>函数。</p>\n<pre><code>function sumMatrix(matrix: number[][]) {\r\n    let sum = 0;\r\n    for (let i = 0; i &#x3C; matrix.length; i++) {\r\n        var currentRow = matrix[i];\r\n        for (let i = 0; i &#x3C; currentRow.length; i++) {\r\n            sum += currentRow[i];\r\n        }\r\n    }\r\n\r\n    return sum;\r\n}\n</code></pre>\n<p>这个版本的循环能得到正确的结果，因为内层循环的<code>i</code>可以屏蔽掉外层循环的<code>i</code>。</p>\n<p><em>通常</em>来讲应该避免使用屏蔽，因为我们需要写出清晰的代码。 同时也有些场景适合利用它，你需要好好打算一下。</p>\n<h2>块级作用域变量的获取</h2>\n<p>在我们最初谈及获取用<code>var</code>声明的变量时，我们简略地探究了一下在获取到了变量之后它的行为是怎样的。 直观地讲，每次进入一个作用域时，它创建了一个变量的<em>环境</em>。 就算作用域内代码已经执行完毕，这个环境与其捕获的变量依然存在。</p>\n<pre><code>function theCityThatAlwaysSleeps() {\r\n    let getCity;\r\n\r\n    if (true) {\r\n        let city = \"Seattle\";\r\n        getCity = function() {\r\n            return city;\r\n        }\r\n    }\r\n\r\n    return getCity();\r\n}\n</code></pre>\n<p>因为我们已经在<code>city</code>的环境里获取到了<code>city</code>，所以就算<code>if</code>语句执行结束后我们仍然可以访问它。</p>\n<p>回想一下前面<code>setTimeout</code>的例子，我们最后需要使用立即执行的函数表达式来获取每次<code>for</code>循环迭代里的状态。 实际上，我们做的是为获取到的变量创建了一个新的变量环境。 这样做挺痛苦的，但是幸运的是，你不必在TypeScript里这样做了。</p>\n<p>当<code>let</code>声明出现在循环体里时拥有完全不同的行为。 不仅是在循环里引入了一个新的变量环境，而是针对<em>每次迭代</em>都会创建这样一个新作用域。 这就是我们在使用立即执行的函数表达式时做的事，所以在<code>setTimeout</code>例子里我们仅使用<code>let</code>声明就可以了。</p>\n<pre><code>for (let i = 0; i &#x3C; 10 ; i++) {\r\n    setTimeout(function() {console.log(i); }, 100 * i);\r\n}\n</code></pre>\n<p>会输出与预料一致的结果：</p>\n<pre><code>0\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\n</code></pre>\n<h1><code>const</code> 声明</h1>\n<p><code>const</code> 声明是声明变量的另一种方式。</p>\n<pre><code>const numLivesForCat = 9;\n</code></pre>\n<p>它们与<code>let</code>声明相似，但是就像它的名字所表达的，它们被赋值后不能再改变。 换句话说，它们拥有与<code>let</code>相同的作用域规则，但是不能对它们重新赋值。</p>\n<p>这很好理解，它们引用的值是<em>不可变的</em>。</p>\n<pre><code>const numLivesForCat = 9;\r\nconst kitty = {\r\n    name: \"Aurora\",\r\n    numLives: numLivesForCat,\r\n}\r\n\r\n// Error\r\nkitty = {\r\n    name: \"Danielle\",\r\n    numLives: numLivesForCat\r\n};\r\n\r\n// all \"okay\"\r\nkitty.name = \"Rory\";\r\nkitty.name = \"Kitty\";\r\nkitty.name = \"Cat\";\r\nkitty.numLives--;\n</code></pre>\n<p>除非你使用特殊的方法去避免，实际上<code>const</code>变量的内部状态是可修改的。 幸运的是，TypeScript允许你将对象的成员设置成只读的。 <a href=\"https://typescript.bootcss.com/Interfaces.md\">接口</a>一章有详细说明。</p>\n<h1><code>let</code> vs. <code>const</code></h1>\n<p>现在我们有两种作用域相似的声明方式，我们自然会问到底应该使用哪个。 与大多数泛泛的问题一样，答案是：依情况而定。</p>\n<p>使用<a href=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">最小特权原则</a>，所有变量除了你计划去修改的都应该使用<code>const</code>。 基本原则就是如果一个变量不需要对它写入，那么其它使用这些代码的人也不能够写入它们，并且要思考为什么会需要对这些变量重新赋值。 使用<code>const</code>也可以让我们更容易的推测数据的流动。</p>\n<p>另一方面，用户很喜欢<code>let</code>的简洁性。 这个手册大部分地方都使用了<code>let</code>。</p>\n<p>跟据你的自己判断，如果合适的话，与团队成员商议一下。</p>\n<h1>解构</h1>\n<p>Another TypeScript已经可以解析其它 ECMAScript 2015 特性了。 完整列表请参见 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">the article on the Mozilla Developer Network</a>。 本章，我们将给出一个简短的概述。</p>\n<h2>解构数组</h2>\n<p>最简单的解构莫过于数组的解构赋值了：</p>\n<pre><code>let input = [1, 2];\r\nlet [first, second] = input;\r\nconsole.log(first); // outputs 1\r\nconsole.log(second); // outputs 2\n</code></pre>\n<p>这创建了2个命名变量 <code>first</code> 和 <code>second</code>。 相当于使用了索引，但更为方便：</p>\n<pre><code>first = input[0];\r\nsecond = input[1];\n</code></pre>\n<p>解构作用于已声明的变量会更好：</p>\n<pre><code>// swap variables\r\n[first, second] = [second, first];\n</code></pre>\n<p>作用于函数参数：</p>\n<pre><code>function f([first, second]: [number, number]) {\r\n    console.log(first);\r\n    console.log(second);\r\n}\r\nf(input);\n</code></pre>\n<p>你可以在数组里使用<code>...</code>语法创建剩余变量：</p>\n<pre><code>let [first, ...rest] = [1, 2, 3, 4];\r\nconsole.log(first); // outputs 1\r\nconsole.log(rest); // outputs [ 2, 3, 4 ]\n</code></pre>\n<p>当然，由于是JavaScript, 你可以忽略你不关心的尾随元素：</p>\n<pre><code>let [first] = [1, 2, 3, 4];\r\nconsole.log(first); // outputs 1\n</code></pre>\n<p>或其它元素：</p>\n<pre><code>let [, second, , fourth] = [1, 2, 3, 4];\n</code></pre>\n<h2>对象解构</h2>\n<p>你也可以解构对象：</p>\n<pre><code>let o = {\r\n    a: \"foo\",\r\n    b: 12,\r\n    c: \"bar\"\r\n};\r\nlet { a, b } = o;\n</code></pre>\n<p>这通过 <code>o.a</code> and <code>o.b</code> 创建了 <code>a</code> 和 <code>b</code> 。 注意，如果你不需要 <code>c</code> 你可以忽略它。</p>\n<p>就像数组解构，你可以用没有声明的赋值：</p>\n<pre><code>({ a, b } = { a: \"baz\", b: 101 });\n</code></pre>\n<p>注意，我们需要用括号将它括起来，因为Javascript通常会将以 <code>{</code> 起始的语句解析为一个块。</p>\n<p>你可以在对象里使用<code>...</code>语法创建剩余变量：</p>\n<pre><code>let { a, ...passthrough } = o;\r\nlet total = passthrough.b + passthrough.c.length;\n</code></pre>\n<h3>属性重命名</h3>\n<p>你也可以给属性以不同的名字：</p>\n<pre><code>let { a: newName1, b: newName2 } = o;\n</code></pre>\n<p>这里的语法开始变得混乱。 你可以将 <code>a: newName1</code> 读做 “<code>a</code> 作为 <code>newName1</code>“。 方向是从左到右，好像你写成了以下样子：</p>\n<pre><code>let newName1 = o.a;\r\nlet newName2 = o.b;\n</code></pre>\n<p>令人困惑的是，这里的冒号<em>不是</em>指示类型的。 如果你想指定它的类型， 仍然需要在其后写上完整的模式。</p>\n<pre><code>let {a, b}: {a: string, b: number} = o;\n</code></pre>\n<h3>默认值</h3>\n<p>默认值可以让你在属性为 undefined 时使用缺省值：</p>\n<pre><code>function keepWholeObject(wholeObject: { a: string, b?: number }) {\r\n    let { a, b = 1001 } = wholeObject;\r\n}\n</code></pre>\n<p>现在，即使 <code>b</code> 为 undefined ， <code>keepWholeObject</code> 函数的变量 <code>wholeObject</code> 的属性 <code>a</code> 和 <code>b</code> 都会有值。</p>\n<h2>函数声明</h2>\n<p>解构也能用于函数声明。 看以下简单的情况：</p>\n<pre><code>type C = { a: string, b?: number }\r\nfunction f({ a, b }: C): void {\r\n    // ...\r\n}\n</code></pre>\n<p>但是，通常情况下更多的是指定默认值，解构默认值有些棘手。 首先，你需要在默认值之前设置其格式。</p>\n<pre><code>function f({ a, b } = { a: \"\", b: 0 }): void {\r\n    // ...\r\n}\r\nf(); // ok, default to { a: \"\", b: 0 }\n</code></pre>\n<blockquote>\n<p>上面的代码是一个类型推断的例子，将在本手册后文介绍。</p>\n</blockquote>\n<p>其次，你需要知道在解构属性上给予一个默认或可选的属性用来替换主初始化列表。 要知道 <code>C</code> 的定义有一个 <code>b</code> 可选属性：</p>\n<pre><code>function f({ a, b = 0 } = { a: \"\" }): void {\r\n    // ...\r\n}\r\nf({ a: \"yes\" }); // ok, default b = 0\r\nf(); // ok, default to {a: \"\"}, which then defaults b = 0\r\nf({}); // error, 'a' is required if you supply an argument\n</code></pre>\n<p>要小心使用解构。 从前面的例子可以看出，就算是最简单的解构表达式也是难以理解的。 尤其当存在深层嵌套解构的时候，就算这时没有堆叠在一起的重命名，默认值和类型注解，也是令人难以理解的。 解构表达式要尽量保持小而简单。 你自己也可以直接使用解构将会生成的赋值表达式。</p>\n<h2>展开</h2>\n<p>展开操作符正与解构相反。 它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象。 例如：</p>\n<pre><code>let first = [1, 2];\r\nlet second = [3, 4];\r\nlet bothPlus = [0, ...first, ...second, 5];\n</code></pre>\n<p>这会令<code>bothPlus</code>的值为<code>[0, 1, 2, 3, 4, 5]</code>。 展开操作创建了<code>first</code>和<code>second</code>的一份浅拷贝。 它们不会被展开操作所改变。</p>\n<p>你还可以展开对象：</p>\n<pre><code>let defaults = { food: \"spicy\", price: \"$$\", ambiance: \"noisy\" };\r\nlet search = { ...defaults, food: \"rich\" };\n</code></pre>\n<p><code>search</code>的值为<code>{ food: \"rich\", price: \"$$\", ambiance: \"noisy\" }</code>。 对象的展开比数组的展开要复杂的多。 像数组展开一样，它是从左至右进行处理，但结果仍为对象。 这就意味着出现在展开对象后面的属性会覆盖前面的属性。 因此，如果我们修改上面的例子，在结尾处进行展开的话：</p>\n<pre><code>let defaults = { food: \"spicy\", price: \"$$\", ambiance: \"noisy\" };\r\nlet search = { food: \"rich\", ...defaults };\n</code></pre>\n<p>那么，<code>defaults</code>里的<code>food</code>属性会重写<code>food: \"rich\"</code>，在这里这并不是我们想要的结果。</p>\n<p>对象展开还有其它一些意想不到的限制。 首先，它仅包含对象 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">自身的可枚举属性</a>。 大体上是说当你展开一个对象实例时，你会丢失其方法：</p>\n<pre><code>class C {\r\n  p = 12;\r\n  m() {\r\n  }\r\n}\r\nlet c = new C();\r\nlet clone = { ...c };\r\nclone.p; // ok\r\nclone.m(); // error!\n</code></pre>\n<p>其次，TypeScript编译器不允许展开泛型函数上的类型参数。 这个特性会在TypeScript的未来版本中考虑实现。</p>"},"__N_SSG":true}
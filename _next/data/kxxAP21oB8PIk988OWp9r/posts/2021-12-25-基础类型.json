{"pageProps":{"title":"TypeScript-基础类型","description":"为了让程序有价值，我们需要能够处理最简单的数据单元：数字，字符串，结构体，布尔值等。 TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用","date":"2021-12-25","modified_date":"2021-12-25","image":"/assets/images/posts/random-img.jpg","content":"<h3>基础类型</h3>\n<h1>介绍</h1>\n<p>为了让程序有价值，我们需要能够处理最简单的数据单元：数字，字符串，结构体，布尔值等。 TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。</p>\n<h1>布尔值</h1>\n<p>最基本的数据类型就是简单的true/false值，在JavaScript和TypeScript里叫做<code>boolean</code>（其它语言中也一样）。</p>\n<pre><code>let isDone: boolean = false;\n</code></pre>\n<h1>数字</h1>\n<p>和JavaScript一样，TypeScript里的所有数字都是浮点数。 这些浮点数的类型是<code>number</code>。 除了支持十进制和十六进制字面量，TypeScript还支持ECMAScript 2015中引入的二进制和八进制字面量。</p>\n<pre><code>let decLiteral: number = 6;\r\nlet hexLiteral: number = 0xf00d;\r\nlet binaryLiteral: number = 0b1010;\r\nlet octalLiteral: number = 0o744;\n</code></pre>\n<h1>字符串</h1>\n<p>JavaScript程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用<code>string</code>表示文本数据类型。 和JavaScript一样，可以使用双引号（<code>\"</code>）或单引号（<code>'</code>）表示字符串。</p>\n<pre><code>let name: string = \"bob\";\r\nname = \"smith\";\n</code></pre>\n<p>你还可以使用<em>模版字符串</em>，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围（```），并且以<code>${ expr }</code>这种形式嵌入表达式</p>\n<pre><code>let name: string = `Gene`;\r\nlet age: number = 37;\r\nlet sentence: string = `Hello, my name is ${ name }.\r\n\r\nI'll be ${ age + 1 } years old next month.`;\n</code></pre>\n<p>这与下面定义<code>sentence</code>的方式效果相同：</p>\n<pre><code>let sentence: string = \"Hello, my name is \" + name + \".\\n\\n\" +\r\n    \"I'll be \" + (age + 1) + \" years old next month.\";\n</code></pre>\n<h1>数组</h1>\n<p>TypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上<code>[]</code>，表示由此类型元素组成的一个数组：</p>\n<pre><code>let list: number[] = [1, 2, 3];\n</code></pre>\n<p>第二种方式是使用数组泛型，<code>Array&#x3C;元素类型></code>：</p>\n<pre><code>let list: Array&#x3C;number> = [1, 2, 3];\n</code></pre>\n<h1>元组 Tuple</h1>\n<p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为<code>string</code>和<code>number</code>类型的元组。</p>\n<pre><code>// Declare a tuple type\r\nlet x: [string, number];\r\n// Initialize it\r\nx = ['hello', 10]; // OK\r\n// Initialize it incorrectly\r\nx = [10, 'hello']; // Error\n</code></pre>\n<p>当访问一个已知索引的元素，会得到正确的类型：</p>\n<pre><code>console.log(x[0].substr(1)); // OK\r\nconsole.log(x[1].substr(1)); // Error, 'number' does not have 'substr'\n</code></pre>\n<p>当访问一个越界的元素，会使用联合类型替代：</p>\n<pre><code>x[3] = 'world'; // OK, 字符串可以赋值给(string | number)类型\r\n\r\nconsole.log(x[5].toString()); // OK, 'string' 和 'number' 都有 toString\r\n\r\nx[6] = true; // Error, 布尔不是(string | number)类型\n</code></pre>\n<p>联合类型是高级主题，我们会在以后的章节里讨论它。</p>\n<h1>枚举</h1>\n<p><code>enum</code>类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p>\n<pre><code>enum Color {Red, Green, Blue}\r\nlet c: Color = Color.Green;\n</code></pre>\n<p>默认情况下，从<code>0</code>开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从<code>1</code>开始编号：</p>\n<pre><code>enum Color {Red = 1, Green, Blue}\r\nlet c: Color = Color.Green;\n</code></pre>\n<p>或者，全部都采用手动赋值：</p>\n<pre><code>enum Color {Red = 1, Green = 2, Blue = 4}\r\nlet c: Color = Color.Green;\n</code></pre>\n<p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到Color里的哪个名字，我们可以查找相应的名字：</p>\n<pre><code>enum Color {Red = 1, Green, Blue}\r\nlet colorName: string = Color[2];\r\n\r\nalert(colorName);  // 显示'Green'因为上面代码里它的值是2\n</code></pre>\n<h1>任意值</h1>\n<p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用<code>any</code>类型来标记这些变量：</p>\n<pre><code>let notSure: any = 4;\r\nnotSure = \"maybe a string instead\";\r\nnotSure = false; // okay, definitely a boolean\n</code></pre>\n<p>在对现有代码进行改写的时候，<code>any</code>类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。 你可能认为<code>Object</code>有相似的作用，就像它在其它语言中那样。 但是<code>Object</code>类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：</p>\n<pre><code>let notSure: any = 4;\r\nnotSure.ifItExists(); // okay, ifItExists might exist at runtime\r\nnotSure.toFixed(); // okay, toFixed exists (but the compiler doesn't check)\r\n\r\nlet prettySure: Object = 4;\r\nprettySure.toFixed(); // Error: Property 'toFixed' doesn't exist on type 'Object'.\n</code></pre>\n<p>当你只知道一部分数据的类型时，<code>any</code>类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：</p>\n<pre><code>let list: any[] = [1, true, \"free\"];\r\n\r\nlist[1] = 100;\n</code></pre>\n<h1>空值</h1>\n<p>某种程度上来说，<code>void</code>类型像是与<code>any</code>类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是<code>void</code>：</p>\n<pre><code>function warnUser(): void {\r\n    alert(\"This is my warning message\");\r\n}\n</code></pre>\n<p>声明一个<code>void</code>类型的变量没有什么大用，因为你只能为它赋予<code>undefined</code>和<code>null</code>：</p>\n<pre><code>let unusable: void = undefined;\n</code></pre>\n<h1>Null 和 Undefined</h1>\n<p>TypeScript里，<code>undefined</code>和<code>null</code>两者各自有自己的类型分别叫做<code>undefined</code>和<code>null</code>。 和<code>void</code>相似，它们的本身的类型用处不是很大：</p>\n<pre><code>// Not much else we can assign to these variables!\r\nlet u: undefined = undefined;\r\nlet n: null = null;\n</code></pre>\n<p>默认情况下<code>null</code>和<code>undefined</code>是所有类型的子类型。 就是说你可以把<code>null</code>和<code>undefined</code>赋值给<code>number</code>类型的变量。</p>\n<p>然而，当你指定了<code>--strictNullChecks</code>标记，<code>null</code>和<code>undefined</code>只能赋值给<code>void</code>和它们各自。 这能避免<em>很多</em>常见的问题。 也许在某处你想传入一个<code>string</code>或<code>null</code>或<code>undefined</code>，你可以使用联合类型<code>string | null | undefined</code>。 再次说明，稍后我们会介绍联合类型。</p>\n<blockquote>\n<p>注意：我们鼓励尽可能地使用<code>--strictNullChecks</code>，但在本手册里我们假设这个标记是关闭的。</p>\n</blockquote>\n<h1>Never</h1>\n<p><code>never</code>类型表示的是那些永不存在的值的类型。 例如，<code>never</code>类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是<code>never</code>类型，当它们被永不为真的类型保护所约束时。</p>\n<p><code>never</code>类型是任何类型的子类型，也可以赋值给任何类型；然而，<em>没有</em>类型是<code>never</code>的子类型或可以赋值给<code>never</code>类型（除了<code>never</code>本身之外）。 即使<code>any</code>也不可以赋值给<code>never</code>。</p>\n<p>下面是一些返回<code>never</code>类型的函数：</p>\n<pre><code>// 返回never的函数必须存在无法达到的终点\r\nfunction error(message: string): never {\r\n    throw new Error(message);\r\n}\r\n\r\n// 推断的返回值类型为never\r\nfunction fail() {\r\n    return error(\"Something failed\");\r\n}\r\n\r\n// 返回never的函数必须存在无法达到的终点\r\nfunction infiniteLoop(): never {\r\n    while (true) {\r\n    }\r\n}\n</code></pre>\n<h1>类型断言</h1>\n<p>有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</p>\n<p>通过<em>类型断言</em>这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。</p>\n<p>类型断言有两种形式。 其一是“尖括号”语法：</p>\n<pre><code>let someValue: any = \"this is a string\";\r\n\r\nlet strLength: number = (&#x3C;string>someValue).length;\n</code></pre>\n<p>另一个为<code>as</code>语法：</p>\n<pre><code>let someValue: any = \"this is a string\";\r\n\r\nlet strLength: number = (someValue as string).length;\n</code></pre>\n<p>两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有<code>as</code>语法断言是被允许的。</p>\n<h1>关于<code>let</code></h1>\n<p>你可能已经注意到了，我们使用<code>let</code>关键字来代替大家所熟悉的JavaScript关键字<code>var</code>。 <code>let</code>关键字是JavaScript的一个新概念，TypeScript实现了它。 我们会在以后详细介绍它，很多常见的问题都可以通过使用<code>let</code>来解决，所以尽可能地使用<code>let</code>来代替<code>var</code>吧。</p>"},"__N_SSG":true}
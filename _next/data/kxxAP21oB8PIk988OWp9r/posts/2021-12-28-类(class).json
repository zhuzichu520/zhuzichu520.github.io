{"pageProps":{"title":"TypeScript-类(class)","description":"传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的","date":"2021-12-28","modified_date":"2021-12-28","image":"/assets/images/posts/random-img.jpg","content":"<h3>类(class)</h3>\n<h1>介绍</h1>\n<p>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式。 使用TypeScript，我们允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，而不需要等到下个JavaScript版本。</p>\n<h1>类</h1>\n<p>下面看一个使用类的例子：</p>\n<pre><code>class Greeter {\r\n    greeting: string;\r\n    constructor(message: string) {\r\n        this.greeting = message;\r\n    }\r\n    greet() {\r\n        return \"Hello, \" + this.greeting;\r\n    }\r\n}\r\n\r\nlet greeter = new Greeter(\"world\");\n</code></pre>\n<p>如果你使用过C#或Java，你会对这种语法非常熟悉。 我们声明一个<code>Greeter</code>类。这个类有3个成员：一个叫做<code>greeting</code>的属性，一个构造函数和一个<code>greet</code>方法。</p>\n<p>你会注意到，我们在引用任何一个类成员的时候都用了<code>this</code>。 它表示我们访问的是类的成员。</p>\n<p>最后一行，我们使用<code>new</code>构造了<code>Greeter</code>类的一个实例。 它会调用之前定义的构造函数，创建一个<code>Greeter</code>类型的新对象，并执行构造函数初始化它。</p>\n<h1>继承</h1>\n<p>在TypeScript里，我们可以使用常用的面向对象模式。 基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。</p>\n<p>看下面的例子：</p>\n<pre><code>class Animal {\r\n    move(distanceInMeters: number = 0) {\r\n        console.log(`Animal moved ${distanceInMeters}m.`);\r\n    }\r\n}\r\n\r\nclass Dog extends Animal {\r\n    bark() {\r\n        console.log('Woof! Woof!');\r\n    }\r\n}\r\n\r\nconst dog = new Dog();\r\ndog.bark();\r\ndog.move(10);\r\ndog.bark();\n</code></pre>\n<p>这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里，<code>Dog</code>是一个<em>派生类</em>，它派生自<code>Animal</code><em>基类</em>，通过<code>extends</code>关键字。 派生类通常被称作<em>子类</em>，基类通常被称作<em>超类</em>。</p>\n<p>因为<code>Dog</code>继承了<code>Animal</code>的功能，因此我们可以创建一个<code>Dog</code>的实例，它能够<code>bark()</code>和<code>move()</code>。</p>\n<p>下面我们来看个更加复杂的例子。</p>\n<pre><code>class Animal {\r\n    name: string;\r\n    constructor(theName: string) { this.name = theName; }\r\n    move(distanceInMeters: number = 0) {\r\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\r\n    }\r\n}\r\n\r\nclass Snake extends Animal {\r\n    constructor(name: string) { super(name); }\r\n    move(distanceInMeters = 5) {\r\n        console.log(\"Slithering...\");\r\n        super.move(distanceInMeters);\r\n    }\r\n}\r\n\r\nclass Horse extends Animal {\r\n    constructor(name: string) { super(name); }\r\n    move(distanceInMeters = 45) {\r\n        console.log(\"Galloping...\");\r\n        super.move(distanceInMeters);\r\n    }\r\n}\r\n\r\nlet sam = new Snake(\"Sammy the Python\");\r\nlet tom: Animal = new Horse(\"Tommy the Palomino\");\r\n\r\nsam.move();\r\ntom.move(34);\n</code></pre>\n<p>这个例子展示了一些上面没有提到的特性。 这一次，我们使用<code>extends</code>关键字创建了<code>Animal</code>的两个子类：<code>Horse</code>和<code>Snake</code>。</p>\n<p>与前一个例子的不同点是，派生类包含了一个构造函数，它<em>必须</em>调用<code>super()</code>，它会执行基类的构造函数。 而且，在构造函数里访问<code>this</code>的属性之前，我们<em>一定</em>要调用<code>super()</code>。 这个是TypeScript强制执行的一条重要规则。</p>\n<p>这个例子演示了如何在子类里可以重写父类的方法。 <code>Snake</code>类和<code>Horse</code>类都创建了<code>move</code>方法，它们重写了从<code>Animal</code>继承来的<code>move</code>方法，使得<code>move</code>方法根据不同的类而具有不同的功能。 注意，即使<code>tom</code>被声明为<code>Animal</code>类型，但因为它的值是<code>Horse</code>，调用<code>tom.move(34)</code>时，它会调用<code>Horse</code>里重写的方法：</p>\n<pre><code>Slithering...\r\nSammy the Python moved 5m.\r\nGalloping...\r\nTommy the Palomino moved 34m.\n</code></pre>\n<h1>公共，私有与受保护的修饰符</h1>\n<h2>默认为<code>public</code></h2>\n<p>在上面的例子里，我们可以自由的访问程序里定义的成员。 如果你对其它语言中的类比较了解，就会注意到我们在之前的代码里并没有使用<code>public</code>来做修饰；例如，C#要求必须明确地使用<code>public</code>指定成员是可见的。 在TypeScript里，成员都默认为<code>public</code>。</p>\n<p>你也可以明确的将一个成员标记成<code>public</code>。 我们可以用下面的方式来重写上面的<code>Animal</code>类：</p>\n<pre><code>class Animal {\r\n    public name: string;\r\n    public constructor(theName: string) { this.name = theName; }\r\n    public move(distanceInMeters: number) {\r\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\r\n    }\r\n}\n</code></pre>\n<h2>理解<code>private</code></h2>\n<p>当成员被标记成<code>private</code>时，它就不能在声明它的类的外部访问。比如：</p>\n<pre><code>class Animal {\r\n    private name: string;\r\n    constructor(theName: string) { this.name = theName; }\r\n}\r\n\r\nnew Animal(\"Cat\").name; // 错误: 'name' 是私有的.\n</code></pre>\n<p>TypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。</p>\n<p>然而，当我们比较带有<code>private</code>或<code>protected</code>成员的类型的时候，情况就不同了。 如果其中一个类型里包含一个<code>private</code>成员，那么只有当另外一个类型中也存在这样一个<code>private</code>成员， 并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。 对于<code>protected</code>成员也使用这个规则。</p>\n<p>下面来看一个例子，更好地说明了这一点：</p>\n<pre><code>class Animal {\r\n    private name: string;\r\n    constructor(theName: string) { this.name = theName; }\r\n}\r\n\r\nclass Rhino extends Animal {\r\n    constructor() { super(\"Rhino\"); }\r\n}\r\n\r\nclass Employee {\r\n    private name: string;\r\n    constructor(theName: string) { this.name = theName; }\r\n}\r\n\r\nlet animal = new Animal(\"Goat\");\r\nlet rhino = new Rhino();\r\nlet employee = new Employee(\"Bob\");\r\n\r\nanimal = rhino;\r\nanimal = employee; // 错误: Animal 与 Employee 不兼容.\n</code></pre>\n<p>这个例子中有<code>Animal</code>和<code>Rhino</code>两个类，<code>Rhino</code>是<code>Animal</code>类的子类。 还有一个<code>Employee</code>类，其类型看上去与<code>Animal</code>是相同的。 我们创建了几个这些类的实例，并相互赋值来看看会发生什么。 因为<code>Animal</code>和<code>Rhino</code>共享了来自<code>Animal</code>里的私有成员定义<code>private name: string</code>，因此它们是兼容的。 然而<code>Employee</code>却不是这样。当把<code>Employee</code>赋值给<code>Animal</code>的时候，得到一个错误，说它们的类型不兼容。 尽管<code>Employee</code>里也有一个私有成员<code>name</code>，但它明显不是<code>Animal</code>里面定义的那个。</p>\n<h2>理解<code>protected</code></h2>\n<p><code>protected</code>修饰符与<code>private</code>修饰符的行为很相似，但有一点不同，<code>protected</code>成员在派生类中仍然可以访问。例如：</p>\n<pre><code>class Person {\r\n    protected name: string;\r\n    constructor(name: string) { this.name = name; }\r\n}\r\n\r\nclass Employee extends Person {\r\n    private department: string;\r\n\r\n    constructor(name: string, department: string) {\r\n        super(name)\r\n        this.department = department;\r\n    }\r\n\r\n    public getElevatorPitch() {\r\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\r\n    }\r\n}\r\n\r\nlet howard = new Employee(\"Howard\", \"Sales\");\r\nconsole.log(howard.getElevatorPitch());\r\nconsole.log(howard.name); // 错误\n</code></pre>\n<p>注意，我们不能在<code>Person</code>类外使用<code>name</code>，但是我们仍然可以通过<code>Employee</code>类的实例方法访问，因为<code>Employee</code>是由<code>Person</code>派生而来的。</p>\n<p>构造函数也可以被标记成<code>protected</code>。 这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如，</p>\n<pre><code>class Person {\r\n    protected name: string;\r\n    protected constructor(theName: string) { this.name = theName; }\r\n}\r\n\r\n// Employee 能够继承 Person\r\nclass Employee extends Person {\r\n    private department: string;\r\n\r\n    constructor(name: string, department: string) {\r\n        super(name);\r\n        this.department = department;\r\n    }\r\n\r\n    public getElevatorPitch() {\r\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\r\n    }\r\n}\r\n\r\nlet howard = new Employee(\"Howard\", \"Sales\");\r\nlet john = new Person(\"John\"); // 错误: 'Person' 的构造函数是被保护的.\n</code></pre>\n<h1>readonly修饰符</h1>\n<p>你可以使用<code>readonly</code>关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p>\n<pre><code>class Octopus {\r\n    readonly name: string;\r\n    readonly numberOfLegs: number = 8;\r\n    constructor (theName: string) {\r\n        this.name = theName;\r\n    }\r\n}\r\nlet dad = new Octopus(\"Man with the 8 strong legs\");\r\ndad.name = \"Man with the 3-piece suit\"; // 错误! name 是只读的.\n</code></pre>\n<h2>参数属性</h2>\n<p>在上面的例子中，我们不得不定义一个受保护的成员<code>name</code>和一个构造函数参数<code>theName</code>在<code>Person</code>类里，并且立刻给<code>name</code>和<code>theName</code>赋值。 这种情况经常会遇到。<em>参数属性</em>可以方便地让我们在一个地方定义并初始化一个成员。 下面的例子是对之前<code>Animal</code>类的修改版，使用了参数属性：</p>\n<pre><code>class Animal {\r\n    constructor(private name: string) { }\r\n    move(distanceInMeters: number) {\r\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\r\n    }\r\n}\n</code></pre>\n<p>注意看我们是如何舍弃了<code>theName</code>，仅在构造函数里使用<code>private name: string</code>参数来创建和初始化<code>name</code>成员。 我们把声明和赋值合并至一处。</p>\n<p>参数属性通过给构造函数参数添加一个访问限定符来声明。 使用<code>private</code>限定一个参数属性会声明并初始化一个私有成员；对于<code>public</code>和<code>protected</code>来说也是一样。</p>\n<h1>存取器</h1>\n<p>TypeScript支持通过getters/setters来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。</p>\n<p>下面来看如何把一个简单的类改写成使用<code>get</code>和<code>set</code>。 首先，我们从一个没有使用存取器的例子开始。</p>\n<pre><code>class Employee {\r\n    fullName: string;\r\n}\r\n\r\nlet employee = new Employee();\r\nemployee.fullName = \"Bob Smith\";\r\nif (employee.fullName) {\r\n    console.log(employee.fullName);\r\n}\n</code></pre>\n<p>我们可以随意的设置<code>fullName</code>，这是非常方便的，但是这也可能会带来麻烦。</p>\n<p>下面这个版本里，我们先检查用户密码是否正确，然后再允许其修改员工信息。 我们把对<code>fullName</code>的直接访问改成了可以检查密码的<code>set</code>方法。 我们也加了一个<code>get</code>方法，让上面的例子仍然可以工作。</p>\n<pre><code>let passcode = \"secret passcode\";\r\n\r\nclass Employee {\r\n    private _fullName: string;\r\n\r\n    get fullName(): string {\r\n        return this._fullName;\r\n    }\r\n\r\n    set fullName(newName: string) {\r\n        if (passcode &#x26;&#x26; passcode == \"secret passcode\") {\r\n            this._fullName = newName;\r\n        }\r\n        else {\r\n            console.log(\"Error: Unauthorized update of employee!\");\r\n        }\r\n    }\r\n}\r\n\r\nlet employee = new Employee();\r\nemployee.fullName = \"Bob Smith\";\r\nif (employee.fullName) {\r\n    alert(employee.fullName);\r\n}\n</code></pre>\n<p>我们可以修改一下密码，来验证一下存取器是否是工作的。当密码不对时，会提示我们没有权限去修改员工。</p>\n<p>对于存取器有下面几点需要注意的：</p>\n<p>首先，存取器要求你将编译器设置为输出ECMAScript 5或更高。 不支持降级到ECMAScript 3。 其次，只带有<code>get</code>不带有<code>set</code>的存取器自动被推断为<code>readonly</code>。 这在从代码生成<code>.d.ts</code>文件时是有帮助的，因为利用这个属性的用户会看到不允许够改变它的值。</p>\n<h1>静态属性</h1>\n<p>到目前为止，我们只讨论了类的实例成员，那些仅当类被实例化的时候才会被初始化的属性。 我们也可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。 在这个例子里，我们使用<code>static</code>定义<code>origin</code>，因为它是所有网格都会用到的属性。 每个实例想要访问这个属性的时候，都要在<code>origin</code>前面加上类名。 如同在实例属性上使用<code>this.</code>前缀来访问属性一样，这里我们使用<code>Grid.</code>来访问静态属性。</p>\n<pre><code>class Grid {\r\n    static origin = {x: 0, y: 0};\r\n    calculateDistanceFromOrigin(point: {x: number; y: number;}) {\r\n        let xDist = (point.x - Grid.origin.x);\r\n        let yDist = (point.y - Grid.origin.y);\r\n        return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;\r\n    }\r\n    constructor (public scale: number) { }\r\n}\r\n\r\nlet grid1 = new Grid(1.0);  // 1x scale\r\nlet grid2 = new Grid(5.0);  // 5x scale\r\n\r\nconsole.log(grid1.calculateDistanceFromOrigin({x: 10, y: 10}));\r\nconsole.log(grid2.calculateDistanceFromOrigin({x: 10, y: 10}));\n</code></pre>\n<h1>抽象类</h1>\n<p>抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 <code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p>\n<pre><code>abstract class Animal {\r\n    abstract makeSound(): void;\r\n    move(): void {\r\n        console.log('roaming the earch...');\r\n    }\r\n}\n</code></pre>\n<p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。 两者都是定义方法签名但不包含方法体。 然而，抽象方法必须包含<code>abstract</code>关键字并且可以包含访问修饰符。</p>\n<pre><code>abstract class Department {\r\n\r\n    constructor(public name: string) {\r\n    }\r\n\r\n    printName(): void {\r\n        console.log('Department name: ' + this.name);\r\n    }\r\n\r\n    abstract printMeeting(): void; // 必须在派生类中实现\r\n}\r\n\r\nclass AccountingDepartment extends Department {\r\n\r\n    constructor() {\r\n        super('Accounting and Auditing'); // 在派生类的构造函数中必须调用 super()\r\n    }\r\n\r\n    printMeeting(): void {\r\n        console.log('The Accounting Department meets each Monday at 10am.');\r\n    }\r\n\r\n    generateReports(): void {\r\n        console.log('Generating accounting reports...');\r\n    }\r\n}\r\n\r\nlet department: Department; // 允许创建一个对抽象类型的引用\r\ndepartment = new Department(); // 错误: 不能创建一个抽象类的实例\r\ndepartment = new AccountingDepartment(); // 允许对一个抽象子类进行实例化和赋值\r\ndepartment.printName();\r\ndepartment.printMeeting();\r\ndepartment.generateReports(); // 错误: 方法在声明的抽象类中不存在\n</code></pre>\n<h1>高级技巧</h1>\n<h2>构造函数</h2>\n<p>当你在TypeScript里声明了一个类的时候，实际上同时声明了很多东西。 首先就是类的<em>实例</em>的类型。</p>\n<pre><code>class Greeter {\r\n    greeting: string;\r\n    constructor(message: string) {\r\n        this.greeting = message;\r\n    }\r\n    greet() {\r\n        return \"Hello, \" + this.greeting;\r\n    }\r\n}\r\n\r\nlet greeter: Greeter;\r\ngreeter = new Greeter(\"world\");\r\nconsole.log(greeter.greet());\n</code></pre>\n<p>这里，我们写了<code>let greeter: Greeter</code>，意思是<code>Greeter</code>类的实例的类型是<code>Greeter</code>。 这对于用过其它面向对象语言的程序员来讲已经是老习惯了。</p>\n<p>我们也创建了一个叫做<em>构造函数</em>的值。 这个函数会在我们使用<code>new</code>创建类实例的时候被调用。 下面我们来看看，上面的代码被编译成JavaScript后是什么样子的：</p>\n<pre><code>let Greeter = (function () {\r\n    function Greeter(message) {\r\n        this.greeting = message;\r\n    }\r\n    Greeter.prototype.greet = function () {\r\n        return \"Hello, \" + this.greeting;\r\n    };\r\n    return Greeter;\r\n})();\r\n\r\nlet greeter;\r\ngreeter = new Greeter(\"world\");\r\nconsole.log(greeter.greet());\n</code></pre>\n<p>上面的代码里，<code>let Greeter</code>将被赋值为构造函数。 当我们调用<code>new</code>并执行了这个函数后，便会得到一个类的实例。 这个构造函数也包含了类的所有静态属性。 换个角度说，我们可以认为类具有<em>实例部分</em>与<em>静态部分</em>这两个部分。</p>\n<p>让我们稍微改写一下这个例子，看看它们之前的区别：</p>\n<pre><code>class Greeter {\r\n    static standardGreeting = \"Hello, there\";\r\n    greeting: string;\r\n    greet() {\r\n        if (this.greeting) {\r\n            return \"Hello, \" + this.greeting;\r\n        }\r\n        else {\r\n            return Greeter.standardGreeting;\r\n        }\r\n    }\r\n}\r\n\r\nlet greeter1: Greeter;\r\ngreeter1 = new Greeter();\r\nconsole.log(greeter1.greet());\r\n\r\nlet greeterMaker: typeof Greeter = Greeter;\r\ngreeterMaker.standardGreeting = \"Hey there!\";\r\n\r\nlet greeter2: Greeter = new greeterMaker();\r\nconsole.log(greeter2.greet());\n</code></pre>\n<p>这个例子里，<code>greeter1</code>与之前看到的一样。 我们实例化<code>Greeter</code>类，并使用这个对象。 与我们之前看到的一样。</p>\n<p>再之后，我们直接使用类。 我们创建了一个叫做<code>greeterMaker</code>的变量。 这个变量保存了这个类或者说保存了类构造函数。 然后我们使用<code>typeof Greeter</code>，意思是取Greeter类的类型，而不是实例的类型。 或者更确切的说，”告诉我<code>Greeter</code>标识符的类型”，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在<code>greeterMaker</code>上使用<code>new</code>，创建<code>Greeter</code>的实例。</p>\n<h2>把类当做接口使用</h2>\n<p>如上一节里所讲的，类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。</p>\n<pre><code>class Point {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface Point3d extends Point {\r\n    z: number;\r\n}\r\n\r\nlet point3d: Point3d = {x: 1, y: 2, z: 3};\n</code></pre>"},"__N_SSG":true}